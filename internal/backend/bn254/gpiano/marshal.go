// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by gnark DO NOT EDIT
// Modifications Copyright 2023 Tianyi Liu and Tiancheng Xie

package gpiano

import (
	"fmt"
	"io"
	curve "github.com/consensys/gnark-crypto/ecc/bn254"
)

func (proof *Proof) WriteTo(w io.Writer) (int64, error) {
	return proof.writeTo(w, false)
}

func (proof *Proof) WriteRawTo(w io.Writer) (int64, error) {
	return proof.writeTo(w, true)
}

// WriteTo writes binary encoding of Proof to w
func (proof *Proof) writeTo(w io.Writer, raw bool) (int64, error) {
	var enc *curve.Encoder
	if raw {
		enc = curve.NewEncoder(w, curve.RawEncoding())
	} else {
		enc = curve.NewEncoder(w)
	}

	toEncode := []interface{}{
		proof.LRO[:],
		&proof.Z,
		&proof.W,
		proof.Hx[:],
		proof.Hy[:],
	}

	for _, v := range toEncode {
		if err := enc.Encode(v); err != nil {
			return enc.BytesWritten(), err
		}
	}

	n := enc.BytesWritten()

	toWrite := []io.WriterTo{
		&proof.PartialBatchedProof,
		&proof.PartialZShiftedProof,
		&proof.BatchedProof,
		&proof.WShiftedProof,
	}

	for _, v := range toWrite {
		siz, err := v.WriteTo(w)
		n += siz
		if err != nil {
			return n, err
		}
	}

	return n, nil
}

// ReadFrom reads binary representation of Proof from r
func (proof *Proof) ReadFrom(r io.Reader) (int64, error) {
	return 0, fmt.Errorf("not implemented")
}

// WriteTo writes binary encoding of ProvingKey to w
func (pk *ProvingKey) WriteTo(w io.Writer) (n int64, err error) {
	return 0, fmt.Errorf("not implemented")
}

// ReadFrom reads from binary representation in r into ProvingKey
func (pk *ProvingKey) ReadFrom(r io.Reader) (int64, error) {
	return 0, fmt.Errorf("not implemented")

}

// WriteTo writes binary encoding of VerifyingKey to w
func (vk *VerifyingKey) WriteTo(w io.Writer) (n int64, err error) {
	return 0, fmt.Errorf("not implemented")
}

// ReadFrom reads from binary representation in r into VerifyingKey
func (vk *VerifyingKey) ReadFrom(r io.Reader) (int64, error) {
	return 0, fmt.Errorf("not implemented")
}
